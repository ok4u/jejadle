dependencies {
	compile project(':retreat-core')
	
	//compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //compile("org.hibernate:hibernate-validator")
    
    
	
	//compile('org.springframework.boot:spring-boot-starter-actuator')	
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity4', version: '2.1.2.RELEASE'
    
    //compile("org.springframework.boot:spring-boot-starter-remote-shell")
    
    //compile group: 'org.crsh', name: 'crsh.shell.telnet', version: '1.2.0'
    
    //compile("org.crsh:crsh.shell.telnet")

    //compile('de.codecentric:spring-boot-admin-server')
    //compile('de.codecentric:spring-boot-admin-server-ui')
    //compile('de.codecentric:spring-boot-admin-server-ui')
    
    //compile group: 'de.codecentric', name: 'spring-boot-admin-server', version: '1.3.3'
    //compile group: 'de.codecentric', name: 'spring-boot-admin-server-ui', version: '1.3.3'
    //compile group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: '1.3.3'
    
    
    
}

bootRun{
	jvmArgs =['-Dfile.encoding=UTF-8']
}

/**
 * docker 가 설치되어 있다는 가정하에 동작 
 * docker cloude login 되어 있다는 가정
 * docker gradle plugin 을 사용하지 않고 docker cmdline 명령어로 동작
 */

task dockerBuild << {

    exec{
        workingDir '.'
        commandLine 'cmd','/c', 'docker build -t peceik/retreat-app .'
    }
    
    ext.output = {
        return standardOutput.toString()
    }
}

task dockerUpload << {
    exec{
        workingDir '.'
        commandLine 'cmd','/c', 'docker push peceik/retreat-app'
    }
    
    ext.output = {
        return standardOutput.toString()
    }
}

dockerUpload.dependsOn dockerBuild



def runDockerBuild(String target) {
    exec {
        executable "docker"
        args target
    }
}
